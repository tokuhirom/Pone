===
--- input: say(0)
--- expected
0

===
--- input
sub x() { for 1..5 { say $_ };  }; say x(); say 9999
--- expected
1
2
3
4
5

9999

===
--- input
sub x() { for 1..5 { say $_ }; 643 }; say x(); say 9999
--- expected
1
2
3
4
5
643
9999

===
--- input: say(1)
--- expected
1

===
--- input: say('hello')
--- expected
hello

===
--- input: say(1+2)
--- expected
3

===
--- input: say(1-2)
--- expected
-1

===
--- input: say(1+2+3)
--- expected
6

===
--- input: say(1-2+3)
--- expected
2

===
--- input: say(5*2)
--- expected
10

===
--- input: say(abs(-1))
--- expected
1

===
--- input: say((2+3)*4)
--- expected
20

===
--- input: say(True)
--- expected
True

===
--- input: say(False)
--- expected
False

===
--- input: if True { say(3) }
--- expected
3

===
--- input: if False { say(3) }
--- expected:

===
--- input: say(False)
--- expected
False

===
--- input
if False {
    say('not ok');
} else {
    say('ok');
}
--- expected
ok

===
--- input
if False {
    say('not ok');
} else {
    say('ok');
}
--- expected
ok

===
--- input
if False {
    say('not ok');
} elsif True {
    say('ok');
} else {
    say('not ok');
}
--- expected
ok

===
--- input
if False {
    say('not ok');
} elsif False  {
    say('not ok');
} else {
    say('ok');
}
--- expected
ok

===
--- input
say(elems([]))
--- expected
0

===
--- input
say(elems([1,2,3]))
--- expected
3

===
--- input
say 5963
--- expected
5963

===
--- input
my $x = 1111;
say $x;
--- expected
1111

===
--- input
say elems({a => 3});
--- expected
1

===
--- input
say elems({a => 3, b => 4});
--- expected
2

===
--- input
say elems({});
--- expected
0

===
--- input
sub x() { say 3 }
x();
--- expected
3

===
--- input
sub x($n) { say $n }
x(3);
--- expected
3

===
--- input
sub x($n, $m) { say $n-$m }
x(4,9);
--- expected
-5

===
--- input
sub x($n, $m) { return $n-$m }
say x(4,9);
--- expected
-5

===
--- input
say 1;
sub x() { }
say x();
say 2;
--- expected
1

2

===
--- input
sub x() { 5 }; say x();
--- expected
5

===
--- input
my $x=2;$x=$x+1; say $x
--- expected
3

===
--- input
my $x = 2;
{
    my $x = 3;
    $x = $x + 1;
    say $x;
}
say $x;
--- expected
4
2

===
--- input
my $x = 2; sub y() { $x+1 } say y();
--- expected
3

===
--- input
my $n = sub () { say 5 }; $n()
--- expected
5

===
--- input
my $n = sub ($m) { say 5+$m }; $n(3)
--- expected
8

===
--- input
try { say 6; die 3; say 5; }; say 555; say $@
--- expected
6
555
3

===
--- input
for [1,2,3] { say $_ }; for [4,5,6] { say $_ }
--- expected
1
2
3
4
5
6

===
--- input
my $n = 3; while $n { say $n; $n = $n-1 }
--- expected
3
2
1

===
--- input
say 10/2;
say 10/3;
say 10%3;
say 9%3;
say 8%3;
say 7%3;
--- expected
5
3
1
0
2
1

===
--- input
my $a = [[5,9,6],2,3]; say $a[0][1]
--- expected
9

===
--- input
my $a=[1,2,3]; say $a.pop(); say $a.pop(); say $a.pop()
--- expected
3
2
1

===
--- input
for [1,2,3,4,5,6,7,8,9,10] { say $_.is-prime(); }
--- expected
False
True
True
False
True
False
True
False
False
False

===
--- input
say(0.1*10);
--- expected
1.000000

===
--- input
say(3.14.floor());
--- expected
3

===
--- input
say('a\'aa')
--- expected
a'aa

===
--- input
say(0.2+0.1);
say(0.2-0.1);
say(0.2*10);
say(0.2/10);
--- expected
0.300000
0.100000
2.000000
0.020000

===
--- input
say 'hello';
say '';
say q!hoge!;
say q<hoge>;
say q[hoge];
say q{hoge};
say q@hoge@;
say q~hoge~;
--- expected
hello

hoge
hoge
hoge
hoge
hoge
hoge

===
--- input
say q,hoge,;
--- expected
hoge

===
--- input
say {a => 1, b => 2}.elems();
--- expected
2

===
--- input
for 1..10 { say $_ }
--- expected
1
2
3
4
5
6
7
8
9
10

===
--- input
say 1..10;
--- expected
1..10

===
--- input
printf('%05d', 3);
say '';
printf('%.2f', 3.14);
say '';
--- expected
00003
3.14

===
--- input
say 3==3;
say 3==1;
say 3.14==3.14;
say 6.14==3.14;
say 6.14==3.14;
say 3==3.14;
--- expected
True
False
True
False
False
False

===
--- input
say 3!=3;
say 3!=1;
say 3.14!=3.14;
say 6.14!=3.14;
say 6.14!=3.14;
say 3!=3.14;
--- expected
False
True
False
True
True
True

===
--- input
say 3<3;
say 3<2;
say 2<3;
--- expected
False
False
True

===
--- input
say 3<=3;
say 3<=2;
say 2<=3;
--- expected
True
False
True

===
--- input
say 3>3;
say 3>2;
say 2>3;
--- expected
False
True
False

===
--- input
say 3>=3;
say 3>=2;
say 2>=3;
--- expected
True
True
False

===
--- input
say 'c' eq 'c';
say 'c' eq 'd';
say 'cc' eq 'c';
--- expected
True
False
False

===
--- input
say 'c' ne 'c';
say 'c' ne 'd';
say 'cc' ne 'c';
--- expected
False
True
True

===
--- input
say 'd' le 'c'; say 'c' le 'c'; say 'c' le 'd'; say 'cc' le 'c'; say 'c' le 'cc';
--- expected
False
True
True
False
True

===
--- input
say 'd' lt 'c'; say 'c' lt 'c'; say 'c' lt 'd'; say 'cc' lt 'c'; say 'c' lt 'cc';
--- expected
False
False
True
False
True

===
--- input
say 'd' ge 'c'; say 'c' ge 'c'; say 'c' ge 'd'; say 'cc' ge 'c'; say 'c' ge 'cc';
--- expected
True
True
False
True
False

===
--- input
say 'd' gt 'c'; say 'c' gt 'c'; say 'c' gt 'd'; say 'cc' gt 'c'; say 'c' gt 'cc';
--- expected
True
False
False
True
False

===
--- input
say "ho\nge";
--- expected
ho
ge

===
--- input
my $ge=3; say "ho$ge"
--- expected
ho3

===
--- input
say <a b c>[1]
--- expected
b

===
--- input
<a b c>.say;
3.14.say;
1.say;
True.say;
False.say;
q<a>.say;
--- expected
[a,b,c,]
3.140000
1
True
False
a

===
--- input
say 3 ~~ 3;
say 3 ~~ 2;
say 3.14 ~~ 3;
say "3" ~~ 3;
say "3.0" ~~ 3;
--- expected
True
False
False
True
True

===
--- input
q<3>.Int.say
--- expected
3

===
--- input
(+q<3>).say
--- expected
3

===
--- input
(+q<3>).Int.say
--- expected
3

===
--- input
(3.14 + 4.14).say
--- expected
7.280000

===
--- input
(3.14 + 3).say
--- expected
6.140000

===
--- input
"3.14".Num.say
--- expected
3.140000

===
--- input
Nil.gist.say
--- expected
Nil

===
--- input
say slurp("t/dat/hello.txt")
--- expected
hello

===
--- input
print("aaaahh3ge" ~~ /h(((o|3)))ge/)
--- expected
｢h3ge｣
 0 ｢3｣
  0 ｢3｣
   0 ｢3｣

===
--- input
my $a=[]; $a[1]=3; say $a[1]
--- expected
3

===
--- input
my $h={}; $h<a> = "hoge"; say $h<a>
--- expected
hoge

===
--- input
my $h={}; $h.ASSIGN-KEY("a", "hoge"); say $h<a>
--- expected
hoge

===
--- input
say 9223372036854775807;
--- expected
9223372036854775807

===
--- input
say(3.Str)
--- expected
3

===
--- input
.say for 1..3
--- expected
1
2
3

===
--- input
my $p = a => 3; say $p.key; say $p.value
--- expected
a
3

===
--- input
sub fib() { if False { 1 } else { 1 } }; say fib();
--- expected
1

===
--- input
sub x($n) {
    if  $n > 0 {
        say $n;
        x($n-1);
    }
}
x(5);
--- expected
5
4
3
2
1

===
--- input
my $n=0; sub x() { $n=5 }; x(); say $n
--- expected
5

===
--- input
my $inc; { my $n=0; $inc = sub () { $n=$n+1; $n }; }; $inc() for 1..10; say $inc()
--- expected
11

===
--- input
my $a=[1,2,3]; say $a.shift(); say $a.shift; say $a.shift
--- expected
1
2
3

===
--- input
my $ch = chan(0); my $ch2 = chan(0); async(sub() { my $n = $ch.receive(); my $m = $ch.receive; $ch2.send($n+$m)}); $ch.send(5963); $ch.send(4649); say $ch2.receive
--- expected
10612

===
--- input
my $x= [1,2,3]; $x.unshift(9); for $x { say $_ }
--- expected
9
1
2
3

===
--- input
say [1,2,3].join("*")
--- expected
1*2*3

===
--- input
for 1..10 { if $_ == 5 { last } else { .say } }
--- expected
1
2
3
4

===
--- input
for 1..6 { if $_%2==0 { next } else { .say } }
--- expected
1
3
5


===
--- input
say STDOUT.write("hoge\n")
--- expected
hoge
5

===
--- input
my $fh = open("t/dat/hello.txt");
say $fh.eof;
say $fh.read(10);
say $fh.eof;
$fh.rewind();
say $fh.eof;
say $fh.read(10);
say $fh.tell;
$fh.seek(0, SEEK_SET);
say $fh.tell;
$fh.seek(2, SEEK_CUR);
say $fh.tell;
$fh.seek(-1, SEEK_END);
say $fh.tell;
say $fh.getc;
$fh.flock(LOCK_EX);
$fh.close();
--- expected
False
hello
True
False
hello
5
0
2
4
o

===
--- input
say STDIN.fileno
say STDOUT.fileno
say STDERR.fileno
--- expected
0
1
2

===
--- input
fdopen(STDOUT.fileno, "wb").write("HELLO\n")
--- expected
HELLO

===
--- input
say True ? 1 : 2;
say False ? 1 : 2;
--- expected
1
2

===
--- input
say((3 ** 2).Int)
--- expected
9

===
--- input
say("あいう".length)
--- expected
3

===
--- input
say 444 | 6; say 444 ^ 6; say 444 & 6
--- expected
446
442
4

===
--- input
say 200 >> 1; say 200 << 1
--- expected
100
400

